{"componentChunkName":"component---src-templates-blog-post-js","path":"/week03/system-design/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"e8fe38c7-530d-5519-b270-07e037f0c56e","excerpt":"Load balance: DNS like - round robin…, bind.com DNS-Cache, TTL time-to-live Don’t use only DNS-like, no more worry about cache Cookie, Session model break, has…","html":"<ul>\n<li>\n<p>Load balance:</p>\n<ul>\n<li>DNS like - round robin…, bind.com</li>\n<li>DNS-Cache, TTL time-to-live</li>\n<li>Don’t use only DNS-like, no more worry about cache</li>\n<li>Cookie, Session model break, has to send to 1</li>\n<li>Solve: Can use a storage-server, share state, load balance session.</li>\n<li>Problem: Some server dies, no robust</li>\n<li>Solve: RAID -> redundant array of independent disk</li>\n<li>RAID0 store pieces at 2 storage,</li>\n<li>RAID1 store mirror, built-automatic</li>\n<li>RAID10 RAID0+RAID1</li>\n<li>RAID5, RAID6…</li>\n<li>=> reduce probi..</li>\n<li>Software for load balancer: ELB, HAProxy, LVS…</li>\n<li>Hardware: Barracuda, Cisco, Citrix, F5…</li>\n<li>Sticky session </li>\n<li>In-memory caching</li>\n<li>sql cache</li>\n<li>memcached old, redis</li>\n<li>Data replica</li>\n</ul>\n</li>\n<li>\n<p>No SQL</p>\n<ul>\n<li>Partition key: Unique distinct, uniform request random distributed, use to distribute</li>\n<li>Sort key</li>\n<li>LSI, GSI</li>\n<li>Understand the USE CASE</li>\n<li>OLTP, OLAP, DSS</li>\n<li>Define ERD</li>\n<li>Identify dala life cycle: TTL, BK</li>\n</ul>\n</li>\n<li>\n<p>Define access patterns</p>\n<ul>\n<li>Read/Write workloads</li>\n<li>Query dimensions, aggregation</li>\n</ul>\n</li>\n<li>\n<p>Data-modeling</p>\n<ul>\n<li>Avoid relational design patterns, use one table</li>\n</ul>\n</li>\n<li>Review-Repeat-Review…</li>\n<li>Stream -> lambda</li>\n<li>Precompute</li>\n<li>version history</li>\n<li>\n<p>CAP, ACID, BASE</p>\n<ul>\n<li>CAP:</li>\n<li>Consistency: All clients see the same data at the same time, no matter which node they connect to</li>\n<li>Availability: Some node are down, but the remain node return a response for any request</li>\n<li>\n<p>Partition tolerance: The clusters must continue to work, despite any number of communication breakdowns between nodes in the system</p>\n<p>When a network partition failure happens should we decide to</p>\n<ul>\n<li>Cancel the operation and thus decrease the availability but ensure consistency</li>\n<li>Proceed with the operation and thus provide availability but risk inconsistency</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"System design","date":"July 24, 2020","description":"System design"}}},"pageContext":{"slug":"/week03/system-design/","previous":{"fields":{"slug":"/week02/git-flow/"},"frontmatter":{"title":"Git Flow"}},"next":{"fields":{"slug":"/week04/solid/"},"frontmatter":{"title":"SOLID"}}}}}