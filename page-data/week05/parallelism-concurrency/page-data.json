{"componentChunkName":"component---src-templates-blog-post-js","path":"/week05/parallelism-concurrency/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"7dbcd588-341b-5a7e-858e-df48043673f6","excerpt":"Parallelism, Concurrency Parallelism: (Independentability) Two or more tasks run as the same time Concurrency: (Interruptability) Two or more tasks shared timeâ€¦","html":"<h1>Parallelism, Concurrency</h1>\n<ul>\n<li>Parallelism: (Independentability) Two or more tasks run as the same time</li>\n<li>Concurrency: (Interruptability) Two or more tasks shared time, time-slice</li>\n</ul>\n<h1>Concurrency Model</h1>\n<ul>\n<li>A concurrency model specifies how threads in the system collaborate to complete task</li>\n<li>Concurrency model are similar to Distributed system</li>\n<li>Share state: different threads in the system will share some state among them, problems: conditions, deadlock etc.</li>\n<li>Separate state: different threads do not share state, exchange data by copy</li>\n<li>Parallel Workers</li>\n<li>Incomming jobs are assign to different workers</li>\n<li>Advantages: easy to understand</li>\n<li>\n<p>Disavantages: </p>\n<ul>\n<li>shared state can get complex</li>\n<li>part of the parallelization is lost when threads are waiting for each other when access a shared data structures.</li>\n<li>\n<p>non-blocking concurrency algorithms are hard to implement</p>\n<blockquote>\n<p>persistent data structure: if a thread modifies it, gets a reference to the new structure, all other threads keep a reference to the old structure which is still unchanged.\nusually implement as a linked list -> bad performant for CPU cache</p>\n</blockquote>\n</li>\n<li>stateless workers: must re-read the state -> can get slow</li>\n<li>job ordering is nondeterministic: no guarantee which jobs are executed first or last</li>\n</ul>\n</li>\n<li>Assembly Line (Reactive system, Event driven system)</li>\n<li>Each worker only perform part of a full job, when that part is finished the worker forwards the job to the next worker.</li>\n<li>Each worker running on its own thread, shares no state</li>\n<li>Design to use non-blocking IO: the workers do as much as it can until it has to start an IO operation, the result of the IO operation is passed on to another worker</li>\n<li>Reactive, Event Driven systems</li>\n<li>\n<p>Actors vs. Channels</p>\n<ul>\n<li>Actors can send message directly to each other, message are sent and processed asynchronously.</li>\n<li>Channel model, workers do not communicate directly with each other, they publish theirs messages (events) on different channels.</li>\n</ul>\n</li>\n<li>\n<p>Advantages: </p>\n<ul>\n<li>no shared state</li>\n<li>stateful workers: workers can keep a state</li>\n<li>better hardware sympathy: more optimized data structure, cache-friendly</li>\n<li>job ordering is possible</li>\n</ul>\n</li>\n<li>\n<p>Disavantages:</p>\n<ul>\n<li>the execution of a job is spread out over multiple workers, it becomes harder to see what code is being executed for a given job</li>\n<li>may be harder to write the code, callback-hell</li>\n</ul>\n</li>\n<li>Funcional parallelism</li>\n</ul>\n<h1>Thread safe</h1>\n<ul>\n<li>Code still <code class=\"language-text\">safe</code> when execute on multiple thread.</li>\n</ul>\n<h2>Java Thread safety</h2>\n<ol>\n<li>Stateless</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Immutable</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Immutable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Immutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>Thread-Local Fields</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> state <span class=\"token operator\">=</span> <span class=\"token string\">\"my state\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// variable state can only read, write by the same thread that create it</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>Synchoronized collections\nMethods can be accessed by only one thread at a time</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sync <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchonizedCollection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lock using mutex</span></code></pre></div>\n<ol start=\"5\">\n<li>Concurrent collections\nDividing data into segments, more performant than synchronized collections</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// segment lock</span></code></pre></div>\n<ol start=\"6\">\n<li>Atomic Object</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AtomicInteger</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"7\">\n<li>Synchronized methods</li>\n</ol>\n<p>  One thread access this method at a time, blocking access to this method from other threads</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do some works</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// equivalent to</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"8\">\n<li>Synchronized Statements</li>\n</ol>\n<p>  Synchronizing an entire method might be overkill -> synchronized block</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// could cause a deadlock -> DoS attack</span>\n        x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"9\">\n<li>Other Object as a Lock</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjecjLock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Don't use String lock = \"lock\";</span>\n    <span class=\"token comment\">// Don't use Integer.valueOf(1) ...</span>\n    <span class=\"token comment\">// Don't use non-final field</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Class level lock: <code class=\"language-text\">lock use static object</code>, <code class=\"language-text\">synchronized static method</code>, <code class=\"language-text\">synchronized Class.class</code></li>\n<li>Object level lock</li>\n<li>Volatile Fields</li>\n<li>Store the variable in the main memory, read/write it from/to the main memory, instead of from the CPU cache</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> counter<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    total <span class=\"token operator\">+=</span> counter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// visible before writes to counter</span>\n    <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Enough if one thread modifies <code class=\"language-text\">counter</code>, and another thread reads the counter.</li>\n<li>Multiple threads can write to volatile variable and the new written value does not depends on its previous value -> still correct.</li>\n<li>Not enough if both threads modifify <code class=\"language-text\">counter</code> => synchronized</li>\n<li>Thread A writes to <code class=\"language-text\">counter</code>, then thread B reads <code class=\"language-text\">counter</code> then all variables visible to A before writing to volatile variable <code class=\"language-text\">counter</code>, will also be visible to B after it has read <code class=\"language-text\">counter</code></li>\n<li>Thread A reads <code class=\"language-text\">counter</code>, then total will also be re-read from main memory</li>\n<li>Instruction Reordering -> happens-before guarantee</li>\n<li>ReentrantLock</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> reLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    reLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        reLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"12\">\n<li>ReadWriteLock</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantReadWriteLock</span> rwLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> readLock <span class=\"token operator\">=</span> rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> writeLock <span class=\"token operator\">=</span> rwLock<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// when write</span>\nwriteLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// when read</span>\nreadLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//do some read/write</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// unlock write</span>\n  writeLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// unlock read</span>\n  readLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"13\">\n<li>AtomicReference\nâ€¦</li>\n</ol>\n<h1>Race condition</h1>\n<ul>\n<li>anomalous outcomes or behavior because of the unfortunate ordering of events</li>\n</ul>\n<h1>Data race</h1>\n<ul>\n<li>an execution contain a data race if it contains at least two conflicting no-volatile accesses to a shared variable that are not ordered by a happen-before relation</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataRace</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// non-volatile</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// write_0</span>\n  <span class=\"token comment\">// to fix it</span>\n  <span class=\"token comment\">// private static volatile boolean flag = false;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">turnFlagOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// write_1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ForkJoinPool</span><span class=\"token punctuation\">.</span><span class=\"token function\">commonPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataRace</span><span class=\"token operator\">::</span><span class=\"token function\">turnFlagOn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// read_i</span>\n    <span class=\"token comment\">// true, false, infinity-loop</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done: \"</span> <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// read_n</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Dead lock</h1>\n<blockquote>\n<p>State where each member of a group is waiting for another member, (including itself) to take an action</p>\n</blockquote>\n<ul>\n<li>\n<p>avoid deadlock:</p>\n<ul>\n<li>order lock</li>\n<li>interrupt lock </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// final ReentrantLock l = new ReentrantLock();</span>\n<span class=\"token comment\">// Thread t ... {l.lockInterruptibly();}</span>\n<span class=\"token comment\">// t.interrupt();</span></code></pre></div>\n<ul>\n<li>timeout lock: <code class=\"language-text\">l.tryLock(1000, TimeUnit.MILLISECONDS))</code></li>\n<li>handover locking: e.g lock a single node in linkedlist</li>\n</ul>\n</li>\n</ul>\n<h1>Lock-free: atomic operation</h1>\n<h1>Resource starvation</h1>\n<h1>Functional programming</h1>\n<h1>References</h1>\n<p><a href=\"https://kipalog.com/posts/7-concurrency-models-in-seven-week--phan-1\">https://kipalog.com/posts/7-concurrency-models-in-seven-weekâ€”phan-1</a>\n<a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\">http://tutorials.jenkov.com/java-concurrency/volatile.html</a>\n<a href=\"https://www.journaldev.com/1061/thread-safety-in-java\">https://www.journaldev.com/1061/thread-safety-in-java</a>\n<a href=\"https://www.baeldung.com/java-thread-safety\">https://www.baeldung.com/java-thread-safety</a>\n<a href=\"https://github.com/romix/java-concurrent-hash-trie-map/tree/master/src/test/java/com/romix/scala/collection/concurrent\">https://github.com/romix/java-concurrent-hash-trie-map/tree/master/src/test/java/com/romix/scala/collection/concurrent</a>\n<a href=\"http://erlang.org/documentation/doc-5.6/pdf/design_principles.pdf\">http://erlang.org/documentation/doc-5.6/pdf/design_principles.pdf</a>\n<a href=\"https://stackoverflow.com/a/5964238/13285440\">https://stackoverflow.com/a/5964238/13285440</a></p>","frontmatter":{"title":"Parallelism and Concurrency","date":"August 05, 2020","description":"Parallelism and Concurrency"}}},"pageContext":{"slug":"/week05/parallelism-concurrency/","previous":{"fields":{"slug":"/week05/mysql/"},"frontmatter":{"title":"Mysql"}},"next":{"fields":{"slug":"/week05/micro-service/"},"frontmatter":{"title":"Microservice Architecture"}}}}}