{"componentChunkName":"component---src-templates-blog-post-js","path":"/week01/awk/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"87adca33-4ece-5c62-b80d-3595bd1eec0a","excerpt":"awk - pattern scanning and text processing language F value:  sets the field separator, FS, to value v var=value assigns value to program variable var. for (var…","html":"<h1>awk - pattern scanning and text processing language</h1>\n<ul>\n<li>F value:  sets the field separator, FS, to value</li>\n<li>v var=value assigns value to program variable var.</li>\n<li>for (var in array)</li>\n<li>for C-like</li>\n<li>match</li>\n<li>\n<p>OFS=“new sperator”</p>\n<p><code class=\"language-text\">$0 ~ /r/ # match regular expressions</code>\n<code class=\"language-text\">/r/ {action} # if match execute action</code></p>\n</li>\n<li>\n<p>regular expression</p>\n<table>\n<thead>\n<tr>\n<th>regex</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.</code></td>\n<td>match any char</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">^</code></td>\n<td>match front of a string</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$</code></td>\n<td>match back of a string</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[c1c2c3]</code></td>\n<td>match any string c1 or c2 or c3</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[c1-c3]</code></td>\n<td>sam as above</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[^c1c2c3]</code></td>\n<td>not match any c1,c2,c3</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>regex</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">r1r2</code></td>\n<td>matches r1 followed immediately by r2 (concatenation)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r1 | r2</code></td>\n<td>matches r1 or r2 (alternation).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r*</code></td>\n<td>matches r repeated zero or more times.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r+</code></td>\n<td>matches r repeated one or more times.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r?</code></td>\n<td>matches r zero or once.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">(r)</code></td>\n<td>matches r, providing grouping.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>Records and fields\n<code class=\"language-text\">record : $0</code>\n<code class=\"language-text\">fields : $1 .. $NF</code>\nevery change reconstruct $0 -> NF …</li>\n<li>\n<p>Operator : C-like + array member ship <code class=\"language-text\">in</code>, fiels <code class=\"language-text\">$</code></p>\n<p>eg: <code class=\"language-text\">if (1 in arr) {}</code></p>\n</li>\n<li>\n<p>Arrays: </p>\n<ul>\n<li>loop: <code class=\"language-text\">for (var in arr) statement</code></li>\n<li><code class=\"language-text\">delete array</code>, <code class=\"language-text\">delete array[expr]</code></li>\n<li><code class=\"language-text\">if ((i, j) in arr) print a[i, j]</code></li>\n</ul>\n</li>\n<li>\n<p>Built-in functions:</p>\n<ul>\n<li><code class=\"language-text\">gsub(r,s,t)  gsub(r,s)</code></li>\n<li><code class=\"language-text\">index(s,t)</code> 1-base</li>\n<li><code class=\"language-text\">match(s,r)</code></li>\n<li><code class=\"language-text\">split(s,A,r) split(s,A)</code></li>\n<li><code class=\"language-text\">sprintf(fmt,list)</code></li>\n<li><code class=\"language-text\">sub(r,s,t) sub(r,s)</code></li>\n<li><code class=\"language-text\">substr(s,i,n)</code></li>\n<li><code class=\"language-text\">tolower(s) toupper(s)</code></li>\n<li>math <code class=\"language-text\">atan2(y,x) cos(x) exp(x) int(x) log(x) rand() =&gt; 0...1 sin(x) sqrt(x) srand(expr) srand()</code></li>\n<li><code class=\"language-text\">print, printf</code></li>\n<li><code class=\"language-text\">gensub(regexp, replacement, how [, target])</code></li>\n<li><code class=\"language-text\">getline var &lt; &quot;-&quot;</code></li>\n<li><code class=\"language-text\">system(&quot;echo &quot;$1)</code></li>\n</ul>\n</li>\n<li>User defined functions</li>\n</ul>\n<h1>words count :</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"a, b c a\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -o <span class=\"token string\">\"<span class=\"token entity\" title=\"\\b\">\\b</span>[[:alpha:]]<span class=\"token entity\" title=\"\\b\">\\b</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{ count[<span class=\"token variable\">$0</span>]++ }END{ for(idx in count) printf(\"%s-%d<span class=\"token entity\" title=\"\\n\">\\n</span>\",idx,count[idx]) }'</span></code></pre></div>\n<h1>words boundary</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'aa.. a. a a. aaa.'</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'<span class=\"token entity\" title=\"\\b\">\\b</span>\\w<span class=\"token entity\" title=\"\\b\">\\b</span>'</span> -o\n<span class=\"token comment\"># result</span>\n<span class=\"token comment\"># a</span>\n<span class=\"token comment\"># a</span>\n<span class=\"token comment\"># a</span></code></pre></div>\n<h1>Useful resources</h1>\n<p><a href=\"https://www.shortcutfoo.com/app/dojos/awk/cheatsheet\"></a></p>","frontmatter":{"title":"Awk","date":"July 22, 2020","description":"[VTF] Week 01"}}},"pageContext":{"slug":"/week01/awk/","previous":{"fields":{"slug":"/week01/git/"},"frontmatter":{"title":"first time learn git"}},"next":{"fields":{"slug":"/week01/git-flow/"},"frontmatter":{"title":"Git Flow"}}}}}